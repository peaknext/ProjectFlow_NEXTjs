// ProjectFlow - Prisma Schema
// Migration from Google Apps Script to PostgreSQL
// Version: 2.0 - Complete 21 Tables Schema
// Last Updated: 2025-10-20

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  titlePrefix       String?   // คำนำหน้าชื่อ (นาย, นาง, นางสาว, ดร., ฯพณฯ, etc.)
  firstName         String    // ชื่อ
  lastName          String    // นามสกุล
  fullName          String    // Auto-generated from titlePrefix + firstName + lastName (kept for backward compatibility)
  passwordHash      String
  salt              String
  role              UserRole  @default(USER)
  profileImageUrl   String?
  departmentId      String?
  isVerified        Boolean   @default(false)
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  userStatus        UserStatus @default(ACTIVE)
  jobTitleId        String?   // Foreign key to JobTitle table
  jobLevel          String?
  workLocation      String?   // สถานที่ปฏิบัติงาน
  internalPhone     String?   // เบอร์โทรภายใน
  notes             String?   // หมายเหตุเพิ่มเติม (for admin use)
  pinnedTasks       Json?     // Array of task IDs
  additionalRoles   Json?     // {"Role1": "BranchId1"}
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime? // Soft delete

  // Relations
  department            Department?         @relation("UserDepartment", fields: [departmentId], references: [id])
  jobTitle              JobTitle?           @relation("UserJobTitle", fields: [jobTitleId], references: [id])
  sessions              Session[]
  createdTasks          Task[]              @relation("TaskCreator")
  assignedTasks         Task[]              @relation("TaskAssignee")
  taskAssignments       TaskAssignee[]      @relation("UserTaskAssignments") // New: Many-to-many relation
  assignedTasksByMe     TaskAssignee[]      @relation("UserAssignedTasks")   // New: Tasks I assigned to others
  closedTasks           Task[]              @relation("TaskCloser")
  comments              Comment[]
  notifications         Notification[]      @relation("NotificationUser")
  triggeredNotifications Notification[]     @relation("NotificationTrigger")
  createdProjects       Project[]           @relation("ProjectOwner")
  deletedProjects       Project[]           @relation("ProjectDeleter")
  ledDivisions          Division[]          @relation("DivisionLeader")
  headedDepartments     Department[]        @relation("DepartmentHead")
  chiefMissionGroups    MissionGroup[]      @relation("MissionGroupChief")
  createdChecklists     Checklist[]         @relation("ChecklistCreator")
  histories             History[]
  requests              Request[]

  @@index([email])
  @@index([departmentId])
  @@index([jobTitleId])
  @@index([role])
  @@index([userStatus])
  @@map("users")
}

enum UserRole {
  ADMIN
  CHIEF
  LEADER
  HEAD
  MEMBER
  USER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

// ============================================
// JOB TITLES (ตำแหน่งงาน)
// ============================================

model JobTitle {
  id         String @id  // Primary Key (text)
  jobTitleTh String @map("jobtitleth") // ชื่อตำแหน่งภาษาไทย
  jobTitleEn String @map("jobtitleen") // ชื่อตำแหน่งภาษาอังกฤษ

  users User[] @relation("UserJobTitle")

  @@map("jobtitle")
}

model Session {
  id             String   @id @default(cuid())
  sessionToken   String   @unique
  userId         String
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("sessions")
}

// ============================================
// ORGANIZATION STRUCTURE
// ============================================

model MissionGroup {
  id            String    @id @default(cuid())
  name          String
  chiefUserId   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  chief     User?      @relation("MissionGroupChief", fields: [chiefUserId], references: [id])
  divisions Division[]

  @@index([chiefUserId])
  @@map("mission_groups")
}

model Division {
  id              String    @id @default(cuid())
  name            String
  missionGroupId  String
  leaderUserId    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  missionGroup MissionGroup @relation(fields: [missionGroupId], references: [id], onDelete: Cascade)
  leader       User?        @relation("DivisionLeader", fields: [leaderUserId], references: [id])
  departments  Department[]

  @@index([missionGroupId])
  @@index([leaderUserId])
  @@map("divisions")
}

model Department {
  id          String    @id @default(cuid())
  name        String
  divisionId  String
  headUserId  String?
  tel         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  division Division  @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  head     User?     @relation("DepartmentHead", fields: [headUserId], references: [id])
  projects Project[]
  users    User[]    @relation("UserDepartment")

  @@index([divisionId])
  @@index([headUserId])
  @@map("departments")
}

// ============================================
// PROJECTS & TASKS
// ============================================

model Project {
  id            String        @id @default(cuid())
  name          String
  description   String?
  departmentId  String
  ownerUserId   String
  actionPlanId  String?       // Link to ActionPlan
  dateDeleted   DateTime?     // Soft delete timestamp
  userDeletedId String?       // Who deleted
  status            ProjectStatus @default(ACTIVE)
  progress          Float?        @default(0) // Cached progress percentage (0-100)
  progressUpdatedAt DateTime?     // Last time progress was calculated
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  department    Department  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  owner         User        @relation("ProjectOwner", fields: [ownerUserId], references: [id])
  deletedBy     User?       @relation("ProjectDeleter", fields: [userDeletedId], references: [id])
  actionPlan    ActionPlan? @relation("ProjectActionPlan", fields: [actionPlanId], references: [id])
  tasks         Task[]
  statuses      Status[]
  phases        Phase[]     @relation("ProjectPhases")

  @@index([departmentId])
  @@index([ownerUserId])
  @@index([actionPlanId])
  @@index([status])
  @@map("projects")
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  ARCHIVED
}

model Status {
  id        String     @id @default(cuid())
  name      String
  color     String
  order     Int
  type      StatusType
  projectId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@unique([projectId, name])
  @@index([projectId])
  @@map("statuses")
}

enum StatusType {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

model Task {
  id              String    @id @default(cuid())
  name            String
  projectId       String
  description     String?
  assigneeUserId  String?   // @deprecated - Keep for backward compatibility, use assignees relation instead
  statusId        String
  priority        Int       @default(3) // 1-4
  startDate       DateTime?
  dueDate         DateTime?
  parentTaskId    String?
  creatorUserId   String
  closeDate       DateTime?
  difficulty      Int?      // 1-5
  isClosed        Boolean   @default(false)
  closeType       CloseType?
  userClosedId    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee      User?          @relation("TaskAssignee", fields: [assigneeUserId], references: [id])
  assignees     TaskAssignee[] @relation("TaskAssignees") // New: Many-to-many relation
  status        Status         @relation(fields: [statusId], references: [id])
  creator       User           @relation("TaskCreator", fields: [creatorUserId], references: [id])
  closedBy      User?          @relation("TaskCloser", fields: [userClosedId], references: [id])
  parentTask    Task?          @relation("SubTasks", fields: [parentTaskId], references: [id])
  subtasks      Task[]         @relation("SubTasks")
  comments      Comment[]
  checklists    Checklist[]
  histories     History[]

  @@index([projectId])
  @@index([assigneeUserId])
  @@index([statusId])
  @@index([priority])
  @@index([dueDate])
  @@index([isClosed])
  @@index([parentTaskId])
  @@index([createdAt])
  @@index([startDate])
  @@index([createdAt, startDate, dueDate]) // Composite index for fiscal year filtering
  @@map("tasks")
}

enum CloseType {
  COMPLETED
  ABORTED
}

// ============================================
// TASK DETAILS (Comments, Checklists, History)
// ============================================

model Comment {
  id               String   @id @default(cuid())
  taskId           String
  commentorUserId  String
  commentText      String
  mentions         Json?    // Array of mentioned user IDs
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deletedAt        DateTime?

  task       Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  commentor  User @relation(fields: [commentorUserId], references: [id])

  @@index([taskId])
  @@index([commentorUserId])
  @@map("comments")
}

model Checklist {
  id            String   @id @default(cuid())
  name          String
  isChecked     Boolean  @default(false)
  creatorUserId String
  createdDate   DateTime @default(now())
  taskId        String
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  task    Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  creator User @relation("ChecklistCreator", fields: [creatorUserId], references: [id])

  @@index([taskId])
  @@index([creatorUserId])
  @@map("checklists")
}

model History {
  id           String   @id @default(cuid())
  historyText  String
  historyDate  DateTime @default(now())
  taskId       String
  userId       String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])

  @@index([taskId])
  @@index([userId])
  @@index([historyDate])
  @@map("histories")
}

model TaskAssignee {
  id         String   @id @default(cuid())
  taskId     String
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String   // User ID who assigned this task
  createdAt  DateTime @default(now())

  task       Task @relation("TaskAssignees", fields: [taskId], references: [id], onDelete: Cascade)
  user       User @relation("UserTaskAssignments", fields: [userId], references: [id], onDelete: Cascade)
  assignedByUser User @relation("UserAssignedTasks", fields: [assignedBy], references: [id])

  @@unique([taskId, userId]) // Prevent duplicate assignments
  @@index([taskId])
  @@index([userId])
  @@index([assignedBy])
  @@index([assignedAt])
  @@map("task_assignees")
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id                 String           @id @default(cuid())
  userId             String
  triggeredByUserId  String?
  type               NotificationType
  message            String
  taskId             String?
  isRead             Boolean          @default(false)
  createdAt          DateTime         @default(now())

  user        User  @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  triggeredBy User? @relation("NotificationTrigger", fields: [triggeredByUserId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_CLOSED
  COMMENT_MENTION
  PROJECT_UPDATED
  DEADLINE_APPROACHING
  OVERDUE_TASK
  SYSTEM_ANNOUNCEMENT
}

// ============================================
// PHASES (Project Phases)
// ============================================

model Phase {
  id          String   @id @default(cuid())
  name        String
  phaseOrder  Int
  projectId   String
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  project Project @relation("ProjectPhases", fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([phaseOrder])
  @@map("phases")
}

// ============================================
// HOLIDAYS
// ============================================

model Holiday {
  date DateTime @id  // Primary Key (Date only)
  name String

  @@map("holidays")
}

// ============================================
// ORGANIZATIONAL PLANNING (HospMissions, ITGoals, ActionPlans)
// ============================================

model HospitalMission {
  id          String   @id @default(cuid())
  name        String
  description String?
  startYear   Int?
  endYear     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  itGoals     ITGoal[]     @relation("HospitalMissionITGoals")
  actionPlans ActionPlan[] @relation("HospitalMissionActionPlans")

  @@map("hospital_missions")
}

model ITGoal {
  id                 String   @id @default(cuid())
  name               String
  hospMissionId      String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  deletedAt          DateTime?

  hospitalMission HospitalMission @relation("HospitalMissionITGoals", fields: [hospMissionId], references: [id], onDelete: Cascade)

  @@index([hospMissionId])
  @@map("it_goals")
}

model ActionPlan {
  id            String   @id @default(cuid())
  name          String
  hospMissionId String
  itGoalIds     Json?    // JSON array of IT Goal IDs (not FK relation)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime?

  hospitalMission HospitalMission @relation("HospitalMissionActionPlans", fields: [hospMissionId], references: [id], onDelete: Cascade)
  projects        Project[]       @relation("ProjectActionPlan")

  @@index([hospMissionId])
  @@map("action_plans")
}

// ============================================
// REQUESTS (User Requests)
// ============================================

model Request {
  id              String   @id @default(cuid())
  userId          String
  requestType     String
  description     String?
  name            String?
  taskId          String?
  purpose         String?
  purposeDetails  String?
  daysDemanded    Int?
  daysNeeded      Int?
  userTel         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([requestType])
  @@index([createdAt])
  @@map("requests")
}

// ============================================
// CONFIGURATION
// ============================================

model Config {
  id          String   @id @default(cuid())
  configKey   String   @unique
  configValue String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([configKey])
  @@map("configs")
}

// ============================================
// PERMISSIONS SYSTEM
// ============================================

model Permission {
  permissionKey  String @id  // Primary Key (e.g., "tasks.create")
  permissionName String
  category       String  // "tasks", "projects", "users", etc.

  rolePermissions RolePermission[]

  @@index([category])
  @@map("permissions")
}

model RolePermission {
  id            String  @id @default(cuid())
  roleName      String  // "ADMIN", "CHIEF", "LEADER", etc.
  permissionKey String
  allowed       Boolean @default(true)

  permission Permission @relation(fields: [permissionKey], references: [permissionKey], onDelete: Cascade)

  @@unique([roleName, permissionKey])
  @@index([roleName])
  @@index([permissionKey])
  @@map("role_permissions")
}
