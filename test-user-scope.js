const { PrismaClient } = require('./src/generated/prisma');
const { getUserManageableUserIds } = require('./src/lib/permissions');

const prisma = new PrismaClient();

async function testUserScope() {
  try {
    console.log('===== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£ =====\n');

    // Get all active users
    const allUsers = await prisma.user.findMany({
      where: { deletedAt: null },
      select: {
        id: true,
        email: true,
        fullName: true,
        role: true,
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log('üìä ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', allUsers.length, '‡∏Ñ‡∏ô\n');

    // Test each user's scope
    for (const testUser of allUsers) {
      console.log(`\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö: ${testUser.fullName} (${testUser.role})`);
      console.log(`   Email: ${testUser.email}`);
      console.log(`   User ID: ${testUser.id}`);

      // Get manageable user IDs for this user
      const manageableIds = await getUserManageableUserIds(testUser.id);

      console.log(`   ‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${manageableIds.length} ‡∏Ñ‡∏ô`);

      if (manageableIds.length > 0) {
        // Get details of manageable users
        const manageableUsers = await prisma.user.findMany({
          where: { id: { in: manageableIds } },
          select: {
            id: true,
            fullName: true,
            role: true,
            email: true,
          },
          orderBy: { fullName: 'asc' }
        });

        console.log('\n   ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô:');
        manageableUsers.forEach((u, i) => {
          console.log(`      ${i + 1}. ${u.fullName} (${u.role}) - ${u.email}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÉ‡∏î‡πÑ‡∏î‡πâ (role ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£)');
      }

      console.log('   ' + '‚îÄ'.repeat(80));
    }

    console.log('\n\n===== ‡∏™‡∏£‡∏∏‡∏õ =====\n');
    console.log('üìã Logic ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:');
    console.log('   ‚Ä¢ ADMIN: ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ADMIN ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô');
    console.log('   ‚Ä¢ CHIEF: ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Mission Group ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á + additional roles');
    console.log('   ‚Ä¢ LEADER: ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Division ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á + additional roles');
    console.log('   ‚Ä¢ HEAD: ‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Department ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á + additional roles');
    console.log('   ‚Ä¢ MEMBER/USER: ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏Ñ‡∏£ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£)');
    console.log('\nüìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (filtered out)');

  } catch (error) {
    console.error('‚ùå Error:', error);
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

testUserScope();
