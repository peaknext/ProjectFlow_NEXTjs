/**
 * CreateUserModal - User creation slide panel (ADMIN only)
 *
 * Key Features:
 * - ADMIN only access
 * - Side panel animation (same as TaskPanel)
 * - No password field (auto-generated by backend + email sent)
 * - Department selector with search (Popover)
 * - Role selector (Select dropdown with 6 roles)
 * - New fields: workLocation, internalPhone (optional)
 * - Auto-verified and active status
 * - Password reset email sent automatically
 */

'use client';

import { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { useQuery } from '@tanstack/react-query';
import { X, Loader2, ChevronDown, Check, ChevronsUpDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from '@/components/ui/command';
import { useUIStore } from '@/stores/use-ui-store';
import { useWorkspace } from '@/hooks/use-workspace';
import { useCreateUser } from '@/hooks/use-users';
import { getCommonTitlePrefixes } from '@/lib/user-utils';
import { api } from '@/lib/api-client';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';

interface Department {
  id: string;
  name: string;
  divisionId: string;
}

interface JobTitle {
  id: string;
  jobTitleTh: string;
  jobTitleEn: string;
}

interface UserFormData {
  email: string;
  titlePrefix?: string; // คำนำหน้าชื่อ (optional)
  firstName: string; // ชื่อ (required)
  lastName: string; // นามสกุล (required)
  departmentId: string;
  role: 'ADMIN' | 'CHIEF' | 'LEADER' | 'HEAD' | 'MEMBER' | 'USER';
  jobTitleId?: string; // Foreign key to JobTitle table
  jobLevel?: string;
  workLocation?: string;
  internalPhone?: string;
}

export function CreateUserModal() {
  const createUserModal = useUIStore((state) => state.modals.createUser);
  const closeCreateUserModal = useUIStore((state) => state.closeCreateUserModal);

  // Animation state (same as TaskPanel)
  const [isVisible, setIsVisible] = useState(false);
  const [shouldRender, setShouldRender] = useState(false);

  // Create user mutation
  const createUserMutation = useCreateUser();

  // Workspace data
  const { data: workspaceData } = useWorkspace();

  // Fetch job titles
  const { data: jobTitlesData, isLoading: isLoadingJobTitles } = useQuery({
    queryKey: ['jobTitles'],
    queryFn: async () => {
      const response = await api.get<{ jobTitles: JobTitle[] }>('/api/job-titles');
      return response.jobTitles;
    },
  });

  // Popover/Combobox state
  const [departmentPopoverOpen, setDepartmentPopoverOpen] = useState(false);
  const [departmentSearch, setDepartmentSearch] = useState('');
  const [titlePrefixOpen, setTitlePrefixOpen] = useState(false);
  const [jobTitleOpen, setJobTitleOpen] = useState(false);

  // Form state management
  const {
    register,
    control,
    watch,
    setValue,
    reset,
    handleSubmit: handleFormSubmit,
    formState: { errors }
  } = useForm<UserFormData>({
    defaultValues: {
      email: '',
      titlePrefix: '',
      firstName: '',
      lastName: '',
      departmentId: '',
      role: 'MEMBER',
      jobTitleId: '',
      jobLevel: '',
      workLocation: '',
      internalPhone: '',
    }
  });

  // Watch form values
  const watchDepartmentId = watch('departmentId');

  // Handle open/close animations (SAME AS TASKPANEL & CREATEPROJECTMODAL)
  useEffect(() => {
    if (createUserModal.isOpen) {
      // Opening: render immediately, then trigger animation
      setShouldRender(true);
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          setIsVisible(true);
        });
      });
      // Reset form to defaults
      reset({
        email: '',
        titlePrefix: '',
        firstName: '',
        lastName: '',
        departmentId: '',
        role: 'MEMBER',
        jobTitleId: '',
        jobLevel: '',
        workLocation: '',
        internalPhone: '',
      });
    } else {
      // Closing: trigger animation, then unmount after animation completes
      setIsVisible(false);
      const timer = setTimeout(() => {
        setShouldRender(false);
      }, 300); // Match animation duration
      return () => clearTimeout(timer);
    }
  }, [createUserModal.isOpen, reset]);

  // Extract departments from workspace (flatten all departments)
  const departments: Department[] = [];

  if (workspaceData?.hierarchical) {
    workspaceData.hierarchical.forEach((mg) => {
      mg.divisions?.forEach((div) => {
        div.departments?.forEach((dept) => {
          departments.push({ id: dept.id, name: dept.name, divisionId: div.id });
        });
      });
    });
  }

  // Handle close
  const handleClose = () => {
    closeCreateUserModal();
  };

  // Handle form submission
  const onSubmit = async (data: UserFormData) => {
    // Validate required fields
    if (!data.firstName?.trim()) {
      toast.error('กรุณากรอกชื่อ');
      return;
    }

    if (!data.lastName?.trim()) {
      toast.error('กรุณากรอกนามสกุล');
      return;
    }

    if (!data.email.trim()) {
      toast.error('กรุณากรอกอีเมล');
      return;
    }

    // Email format validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(data.email)) {
      toast.error('รูปแบบอีเมลไม่ถูกต้อง');
      return;
    }

    if (!data.departmentId) {
      toast.error('กรุณาเลือกหน่วยงาน');
      return;
    }

    if (!data.role) {
      toast.error('กรุณาเลือกบทบาท');
      return;
    }

    // Create user
    createUserMutation.mutate(
      {
        email: data.email.trim(),
        titlePrefix: data.titlePrefix?.trim() || undefined,
        firstName: data.firstName.trim(),
        lastName: data.lastName.trim(),
        departmentId: data.departmentId,
        role: data.role,
        jobTitleId: data.jobTitleId || undefined,
        jobLevel: data.jobLevel?.trim() || undefined,
        workLocation: data.workLocation?.trim() || undefined,
        internalPhone: data.internalPhone?.trim() || undefined,
      },
      {
        onSuccess: (response: any) => {
          const fullName = data.titlePrefix
            ? `${data.titlePrefix} ${data.firstName} ${data.lastName}`
            : `${data.firstName} ${data.lastName}`;
          const message = response?.message || `สร้างผู้ใช้ "${fullName}" สำเร็จ`;
          toast.success(message);
          handleClose();
        },
        onError: (error: any) => {
          console.error('[CreateUserModal] Error creating user:', error);
          toast.error(error.message || 'ไม่สามารถสร้างผู้ใช้ได้');
        },
      }
    );
  };

  // Don't render if not open
  if (!shouldRender) return null;

  return (
    <>
      {/* Overlay */}
      <div
        className={cn(
          'fixed inset-0 bg-black/30 z-[100]',
          'transition-opacity duration-300 ease-in-out',
          isVisible ? 'opacity-100' : 'opacity-0 pointer-events-none'
        )}
        onClick={handleClose}
      />

      {/* Side Panel */}
      <div
        className={cn(
          'fixed top-0 right-0 h-full w-full max-w-2xl',
          'bg-background/95 backdrop-blur-sm',
          'shadow-2xl z-[101] rounded-xl',
          'flex flex-col',
          'transition-transform duration-300 ease-in-out',
          isVisible ? 'translate-x-0' : 'translate-x-full'
        )}
      >
        {/* Header (solid white background) */}
        <div className="flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700 flex-shrink-0 bg-white dark:bg-slate-950 rounded-t-xl">
          <h2 className="text-lg font-semibold text-slate-900 dark:text-slate-100">สร้างผู้ใช้ใหม่</h2>
          <Button
            variant="ghost"
            size="icon"
            onClick={handleClose}
            className="rounded-full p-2 h-auto w-auto hover:bg-slate-100 dark:hover:bg-slate-800"
          >
            <X className="h-5 w-5 text-slate-600 dark:text-slate-400" />
          </Button>
        </div>

        {/* Body (Scrollable) */}
        <form onSubmit={handleFormSubmit(onSubmit)} className="flex flex-col flex-1 min-h-0">
          <div className="flex-1 overflow-y-auto p-6 lg:p-8 space-y-6">

            {/* Info Alert */}
            <div className="p-4 bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg">
              <p className="text-sm text-blue-700 dark:text-blue-300">
                <strong>หมายเหตุ:</strong> ระบบจะสร้างรหัสผ่านแบบสุ่มโดยอัตโนมัติ และส่งอีเมลสำหรับตั้งรหัสผ่านใหม่ให้ผู้ใช้
              </p>
            </div>

            {/* Title Prefix + First Name + Last Name (3 columns) */}
            <div className="grid grid-cols-3 gap-4">
              {/* Title Prefix - Combobox with custom input */}
              <div>
                <Label htmlFor="titlePrefix" className="text-sm font-medium">
                  คำนำหน้าชื่อ
                </Label>
                <Controller
                  name="titlePrefix"
                  control={control}
                  render={({ field }) => (
                    <Popover open={titlePrefixOpen} onOpenChange={setTitlePrefixOpen}>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          role="combobox"
                          aria-expanded={titlePrefixOpen}
                          className="w-full justify-between mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                        >
                          <span className={cn(!field.value && "text-muted-foreground")}>
                            {field.value || "-- ไม่ระบุ --"}
                          </span>
                          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-[200px] p-0" align="start">
                        <Command>
                          <CommandInput
                            placeholder="ค้นหาหรือพิมพ์คำนำหน้า..."
                            value={field.value || ''}
                            onValueChange={(value) => {
                              field.onChange(value);
                            }}
                          />
                          <CommandList>
                            <CommandEmpty>ไม่พบข้อมูล (กด Enter เพื่อใช้คำนำหน้าที่พิมพ์)</CommandEmpty>
                            <CommandGroup>
                              <CommandItem
                                value=""
                                onSelect={() => {
                                  field.onChange('');
                                  setTitlePrefixOpen(false);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    !field.value ? "opacity-100" : "opacity-0"
                                  )}
                                />
                                -- ไม่ระบุ --
                              </CommandItem>
                              {getCommonTitlePrefixes().map((item) => (
                                <CommandItem
                                  key={item.value}
                                  value={item.value}
                                  onSelect={(currentValue) => {
                                    field.onChange(currentValue);
                                    setTitlePrefixOpen(false);
                                  }}
                                >
                                  <Check
                                    className={cn(
                                      "mr-2 h-4 w-4",
                                      field.value === item.value ? "opacity-100" : "opacity-0"
                                    )}
                                  />
                                  {item.label}
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </CommandList>
                        </Command>
                      </PopoverContent>
                    </Popover>
                  )}
                />
              </div>

              {/* First Name */}
              <div>
                <Label htmlFor="firstName" className="text-sm font-medium">
                  ชื่อ <span className="text-red-500">*</span>
                </Label>
                <Input
                  id="firstName"
                  placeholder="เช่น สมชาย"
                  {...register('firstName')}
                  className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                />
              </div>

              {/* Last Name */}
              <div>
                <Label htmlFor="lastName" className="text-sm font-medium">
                  นามสกุล <span className="text-red-500">*</span>
                </Label>
                <Input
                  id="lastName"
                  placeholder="เช่น ใจดี"
                  {...register('lastName')}
                  className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                />
              </div>
            </div>

            {/* Email */}
            <div>
              <Label htmlFor="email" className="text-sm font-medium">
                อีเมล <span className="text-red-500">*</span>
              </Label>
              <Input
                id="email"
                type="email"
                placeholder="email@example.com"
                {...register('email')}
                className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
              />
            </div>

            {/* Department + Role (2 columns) */}
            <div className="grid grid-cols-2 gap-4">
              {/* Department Selector */}
              <div>
                <Label htmlFor="department" className="text-sm font-medium">
                  หน่วยงาน <span className="text-red-500">*</span>
                </Label>
                <Popover
                  open={departmentPopoverOpen}
                  onOpenChange={setDepartmentPopoverOpen}
                >
                  <PopoverTrigger asChild>
                    <Button
                      type="button"
                      variant="outline"
                      className="w-full justify-between mt-1 h-[46px] text-base bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                    >
                      <span className={cn(!watchDepartmentId && "text-muted-foreground truncate")}>
                        {watchDepartmentId
                          ? departments.find(d => d.id === watchDepartmentId)?.name
                          : "เลือกหน่วยงาน"}
                      </span>
                      <ChevronDown className="h-4 w-4 ml-2 flex-shrink-0 text-muted-foreground" />
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-[400px] p-0" align="start">
                    <div className="p-2 border-b border-border">
                      <Input
                        placeholder="ค้นหาหน่วยงาน..."
                        value={departmentSearch}
                        onChange={(e) => setDepartmentSearch(e.target.value)}
                        className="h-9 bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                      />
                    </div>
                    <div className="max-h-[300px] overflow-y-auto">
                      {departments
                        .filter(dept => dept.name.toLowerCase().includes(departmentSearch.toLowerCase()))
                        .map((dept) => (
                          <button
                            key={dept.id}
                            type="button"
                            className={cn(
                              "w-full px-3 py-2 text-left text-sm hover:bg-accent transition-colors",
                              watchDepartmentId === dept.id && "bg-accent"
                            )}
                            onClick={() => {
                              setValue('departmentId', dept.id);
                              setDepartmentPopoverOpen(false);
                              setDepartmentSearch('');
                            }}
                          >
                            {dept.name}
                          </button>
                        ))}
                      {departments.filter(dept => dept.name.toLowerCase().includes(departmentSearch.toLowerCase())).length === 0 && (
                        <div className="px-3 py-8 text-center text-sm text-muted-foreground">
                          ไม่พบหน่วยงาน
                        </div>
                      )}
                    </div>
                  </PopoverContent>
                </Popover>
              </div>

              {/* Role Selector */}
              <div>
                <Label htmlFor="role" className="text-sm font-medium">
                  บทบาท <span className="text-red-500">*</span>
                </Label>
                <Controller
                  control={control}
                  name="role"
                  render={({ field }) => (
                    <Select value={field.value} onValueChange={field.onChange}>
                      <SelectTrigger className="w-full mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600">
                        <SelectValue placeholder="เลือกบทบาท" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="USER">ผู้ใช้ (USER)</SelectItem>
                        <SelectItem value="MEMBER">สมาชิก (MEMBER)</SelectItem>
                        <SelectItem value="HEAD">หัวหน้าหน่วยงาน (HEAD)</SelectItem>
                        <SelectItem value="LEADER">หัวหน้ากลุ่มงาน (LEADER)</SelectItem>
                        <SelectItem value="CHIEF">หัวหน้ากลุ่มภารกิจ (CHIEF)</SelectItem>
                        <SelectItem value="ADMIN">ผู้ดูแลระบบ (ADMIN)</SelectItem>
                      </SelectContent>
                    </Select>
                  )}
                />
              </div>
            </div>

            {/* Job Title + Job Level (2 columns) */}
            <div className="grid grid-cols-2 gap-4">
              {/* Job Title - Combobox (searchable) */}
              <div>
                <Label htmlFor="jobTitleId" className="text-sm font-medium">
                  ตำแหน่ง
                </Label>
                <Controller
                  name="jobTitleId"
                  control={control}
                  render={({ field }) => (
                    <Popover open={jobTitleOpen} onOpenChange={setJobTitleOpen}>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          role="combobox"
                          aria-expanded={jobTitleOpen}
                          disabled={isLoadingJobTitles}
                          className="w-full justify-between mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
                        >
                          <span className={cn(!field.value && "text-muted-foreground truncate")}>
                            {isLoadingJobTitles
                              ? "กำลังโหลด..."
                              : field.value
                              ? jobTitlesData?.find((jt) => jt.id === field.value)?.jobTitleTh || "-- ไม่ระบุ --"
                              : "-- ไม่ระบุ --"}
                          </span>
                          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent className="w-[300px] p-0" align="start">
                        <Command>
                          <CommandInput placeholder="ค้นหาตำแหน่ง..." />
                          <CommandList>
                            <CommandEmpty>ไม่พบตำแหน่งที่ค้นหา</CommandEmpty>
                            <CommandGroup>
                              <CommandItem
                                value=""
                                onSelect={() => {
                                  field.onChange('');
                                  setJobTitleOpen(false);
                                }}
                              >
                                <Check
                                  className={cn(
                                    "mr-2 h-4 w-4",
                                    !field.value ? "opacity-100" : "opacity-0"
                                  )}
                                />
                                -- ไม่ระบุ --
                              </CommandItem>
                              {jobTitlesData?.map((jobTitle) => (
                                <CommandItem
                                  key={jobTitle.id}
                                  value={jobTitle.jobTitleTh}
                                  onSelect={() => {
                                    field.onChange(jobTitle.id);
                                    setJobTitleOpen(false);
                                  }}
                                >
                                  <Check
                                    className={cn(
                                      "mr-2 h-4 w-4",
                                      field.value === jobTitle.id ? "opacity-100" : "opacity-0"
                                    )}
                                  />
                                  {jobTitle.jobTitleTh}
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </CommandList>
                        </Command>
                      </PopoverContent>
                    </Popover>
                  )}
                />
              </div>

              {/* Job Level - Select dropdown */}
              <div>
                <Label htmlFor="jobLevel" className="text-sm font-medium">
                  ระดับ
                </Label>
                <Controller
                  name="jobLevel"
                  control={control}
                  render={({ field }) => (
                    <Select
                      value={field.value || 'NONE'}
                      onValueChange={(value) => {
                        field.onChange(value === 'NONE' ? '' : value);
                      }}
                    >
                      <SelectTrigger className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600">
                        <SelectValue placeholder="-- ไม่ระบุ --" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="NONE">-- ไม่ระบุ --</SelectItem>
                        <SelectItem value="ปฏิบัติการ">ปฏิบัติการ</SelectItem>
                        <SelectItem value="ชำนาญการ">ชำนาญการ</SelectItem>
                        <SelectItem value="ชำนาญการพิเศษ">ชำนาญการพิเศษ</SelectItem>
                        <SelectItem value="เชี่ยวชาญ">เชี่ยวชาญ</SelectItem>
                        <SelectItem value="ทรงคุณวุฒิ">ทรงคุณวุฒิ</SelectItem>
                        <SelectItem value="ชำนาญงาน">ชำนาญงาน</SelectItem>
                        <SelectItem value="ปฏิบัติงาน">ปฏิบัติงาน</SelectItem>
                        <SelectItem value="อาวุโส">อาวุโส</SelectItem>
                        <SelectItem value="บริหารต้น">บริหารต้น</SelectItem>
                        <SelectItem value="บริหารสูง">บริหารสูง</SelectItem>
                        <SelectItem value="อำนวยการต้น">อำนวยการต้น</SelectItem>
                        <SelectItem value="อำนวยการสูง">อำนวยการสูง</SelectItem>
                      </SelectContent>
                    </Select>
                  )}
                />
              </div>
            </div>

            {/* Work Location (NEW) */}
            <div>
              <Label htmlFor="workLocation" className="text-sm font-medium">
                สถานที่ปฏิบัติงาน
              </Label>
              <Input
                id="workLocation"
                placeholder="เช่น อาคาร 1 ชั้น 3"
                {...register('workLocation')}
                className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
              />
            </div>

            {/* Internal Phone (NEW) */}
            <div>
              <Label htmlFor="internalPhone" className="text-sm font-medium">
                เบอร์โทรภายใน
              </Label>
              <Input
                id="internalPhone"
                placeholder="เช่น 1234, 5678"
                {...register('internalPhone')}
                className="mt-1 h-[46px] bg-white dark:bg-slate-800 border-slate-300 dark:border-slate-600"
              />
            </div>

          </div>

          {/* Footer (solid white background - single button on right) */}
          <footer className="flex justify-end p-4 bg-white dark:bg-slate-950 border-t border-slate-200 dark:border-slate-700 flex-shrink-0 rounded-b-xl">
            <Button
              type="submit"
              disabled={createUserMutation.isPending}
              className="flex items-center justify-center px-6 py-2.5 text-base font-semibold rounded-lg shadow-md h-[46px] min-w-[150px]"
            >
              {createUserMutation.isPending && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
              <span>{createUserMutation.isPending ? 'กำลังสร้าง...' : 'สร้างผู้ใช้'}</span>
            </Button>
          </footer>
        </form>
      </div>
    </>
  );
}
