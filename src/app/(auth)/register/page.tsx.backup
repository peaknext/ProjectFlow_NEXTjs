'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useAuth } from '@/hooks/use-auth';
import { Logo } from '@/components/common/logo';
import { Loader2 } from 'lucide-react';

const registerSchema = z.object({
  fullName: z.string().min(2, 'กรุณากรอกชื่อ-นามสกุล'),
  email: z.string().email('รูปแบบอีเมลไม่ถูกต้อง'),
  divisionId: z.string().min(1, 'กรุณาเลือกกลุ่มงาน'),
  departmentId: z.string().min(1, 'กรุณาเลือกหน่วยงาน'),
  password: z.string()
    .min(8, 'รหัสผ่านต้องมีอย่างน้อย 8 ตัวอักษร')
    .regex(/[A-Z]/, 'ต้องมีตัวพิมพ์ใหญ่')
    .regex(/[a-z]/, 'ต้องมีตัวพิมพ์เล็ก')
    .regex(/[0-9]/, 'ต้องมีตัวเลข')
    .regex(/[^A-Za-z0-9]/, 'ต้องมีอักขระพิเศษ'),
  confirmPassword: z.string().min(1, 'กรุณายืนยันรหัสผ่าน'),
}).refine((data) => data.password === data.confirmPassword, {
  message: 'รหัสผ่านไม่ตรงกัน',
  path: ['confirmPassword'],
});

type RegisterFormData = z.infer<typeof registerSchema>;

interface Division {
  id: string;
  name: string;
}

interface Department {
  id: string;
  name: string;
}

export default function RegisterPage() {
  const { register: registerUser, isRegistering } = useAuth();
  const [divisions, setDivisions] = useState<Division[]>([]);
  const [departments, setDepartments] = useState<Department[]>([]);
  const [selectedDivision, setSelectedDivision] = useState('');
  const [loadingDivisions, setLoadingDivisions] = useState(true);
  const [loadingDepartments, setLoadingDepartments] = useState(false);
  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      divisionId: '',
      departmentId: '',
    },
  });

  // Load divisions on mount
  useEffect(() => {
    const fetchDivisions = async () => {
      try {
        const response = await fetch('/api/public/divisions');
        const data = await response.json();
        if (data.success) {
          setDivisions(data.data.divisions);
        }
      } catch (error) {
        console.error('Failed to load divisions:', error);
      } finally {
        setLoadingDivisions(false);
      }
    };

    fetchDivisions();
  }, []);

  // Load departments when division changes
  useEffect(() => {
    if (!selectedDivision) {
      setDepartments([]);
      setValue('departmentId', '');
      return;
    }

    const fetchDepartments = async () => {
      setLoadingDepartments(true);
      try {
        const response = await fetch(`/api/public/departments?divisionId=${selectedDivision}`);
        const data = await response.json();
        if (data.success) {
          setDepartments(data.data.departments);
        }
      } catch (error) {
        console.error('Failed to load departments:', error);
      } finally {
        setLoadingDepartments(false);
      }
    };

    fetchDepartments();
  }, [selectedDivision, setValue]);

  const onSubmit = (data: RegisterFormData) => {
    registerUser({
      fullName: `${data.firstName} ${data.lastName}`,
      email: data.email,
      password: data.password,
    });
  };

  return (
    <div className="flex items-center justify-center w-full">
      <div className="w-full max-w-3xl p-8 space-y-6 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700">
        {/* Logo + Title */}
        <div className="text-center">
          <div className="flex items-center justify-center mb-4">
            <Logo size={16} marginRight={4} />
            <h1 className="text-3xl sm:text-4xl font-bold text-gray-900 dark:text-white">
              สร้างบัญชีใหม่
            </h1>
          </div>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            กรุณากรอกข้อมูลเพื่อสมัครใช้งาน ProjectFlow
          </p>
        </div>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4" noValidate>
          {/* First Name + Last Name */}
          <div className="grid grid-cols-2 gap-4">
            {/* First Name */}
            <div>
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                ชื่อ
              </label>
              <input
                id="firstName"
                type="text"
                placeholder="กรอกชื่อ"
                autoComplete="given-name"
                {...register('firstName')}
                className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base"
              />
              <p className="text-sm text-red-500 mt-1 h-4">{errors.firstName?.message || ''}</p>
            </div>

            {/* Last Name */}
            <div>
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                นามสกุล
              </label>
              <input
                id="lastName"
                type="text"
                placeholder="กรอกนามสกุล"
                autoComplete="family-name"
                {...register('lastName')}
                className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base"
              />
              <p className="text-sm text-red-500 mt-1 h-4">{errors.lastName?.message || ''}</p>
            </div>
          </div>

          {/* Email */}
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
              อีเมล
            </label>
            <input
              id="email"
              type="email"
              placeholder="กรอกอีเมล"
              autoComplete="email"
              {...register('email')}
              className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base"
            />
            <p className="text-sm text-red-500 mt-1 h-4">{errors.email?.message || ''}</p>
          </div>

          {/* Division + Department */}
          <div className="grid grid-cols-2 gap-4">
            {/* Division */}
            <div>
              <label htmlFor="divisionId" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                ฝ่าย
              </label>
              <div className="relative">
                <select
                  id="divisionId"
                  {...register('divisionId')}
                  onChange={(e) => {
                    setSelectedDivision(e.target.value);
                    setValue('divisionId', e.target.value);
                  }}
                  disabled={loadingDivisions}
                  className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base disabled:opacity-50"
                >
                  <option value="">เลือกฝ่าย</option>
                  {divisions.map((division) => (
                    <option key={division.id} value={division.id}>{division.name}</option>
                  ))}
                </select>
                {loadingDivisions && (
                  <div className="absolute top-1/2 right-10 -translate-y-1/2">
                    <Loader2 className="animate-spin h-5 w-5 text-blue-600" />
                  </div>
                )}
              </div>
              <p className="text-sm text-red-500 mt-1 h-4">{errors.divisionId?.message || ''}</p>
            </div>

            {/* Department */}
            <div>
              <label htmlFor="departmentId" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                แผนก
              </label>
              <div className="relative">
                <select
                  id="departmentId"
                  {...register('departmentId')}
                  disabled={!selectedDivision || loadingDepartments}
                  className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base disabled:opacity-50"
                >
                  <option value="">เลือกแผนก</option>
                  {departments.map((dept) => (
                    <option key={dept.id} value={dept.id}>{dept.name}</option>
                  ))}
                </select>
                {loadingDepartments && (
                  <div className="absolute top-1/2 right-10 -translate-y-1/2">
                    <Loader2 className="animate-spin h-5 w-5 text-blue-600" />
                  </div>
                )}
              </div>
              <p className="text-sm text-red-500 mt-1 h-4">{errors.departmentId?.message || ''}</p>
            </div>
          </div>

          {/* Password + Confirm Password */}
          <div className="grid grid-cols-2 gap-4">
            {/* Password */}
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                รหัสผ่าน
              </label>
              <input
                id="password"
                type="password"
                placeholder="กรอกรหัสผ่าน"
                autoComplete="new-password"
                {...register('password')}
                className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base"
              />
              <p className="text-sm text-red-500 mt-1 h-4">{errors.password?.message || ''}</p>
            </div>

            {/* Confirm Password */}
            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">
                ยืนยันรหัสผ่าน
              </label>
              <input
                id="confirmPassword"
                type="password"
                placeholder="กรอกรหัสผ่านอีกครั้ง"
                autoComplete="new-password"
                {...register('confirmPassword')}
                className="w-full px-4 py-3 bg-gray-50 dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500 focus:ring-blue-600 focus:border-blue-600 transition-colors text-sm sm:text-base"
              />
              <p className="text-sm text-red-500 mt-1 h-4">{errors.confirmPassword?.message || ''}</p>
            </div>
          </div>

          {/* Submit Button */}
          <div className="pt-4">
            <button
              type="submit"
              disabled={isRegistering}
              className="w-full flex justify-center items-center h-[52px] px-4 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-600 transition-colors duration-300 disabled:opacity-50"
            >
              {isRegistering && (
                <Loader2 className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" />
              )}
              <span>ลงทะเบียน</span>
            </button>
          </div>
        </form>

        {/* Login Link */}
        <p className="text-center text-sm text-gray-600 dark:text-gray-400">
          มีบัญชีอยู่แล้ว?{' '}
          <Link href="/login" className="font-medium text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 transition-colors">
            เข้าสู่ระบบ
          </Link>
        </p>
      </div>
    </div>
  );
}
