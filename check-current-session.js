const { PrismaClient } = require('./src/generated/prisma');
const prisma = new PrismaClient();

async function checkCurrentSession() {
  try {
    console.log('===== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô =====\n');

    // Get all active sessions (not expired)
    const activeSessions = await prisma.session.findMany({
      where: {
        expiresAt: { gt: new Date() },
      },
      select: {
        id: true,
        userId: true,
        sessionToken: true,
        expiresAt: true,
        user: {
          select: {
            id: true,
            email: true,
            fullName: true,
            role: true,
            department: {
              select: {
                name: true,
                division: {
                  select: {
                    name: true,
                    missionGroup: { select: { name: true } }
                  }
                }
              }
            }
          }
        },
        createdAt: true,
      },
      orderBy: { createdAt: 'desc' },
      take: 5,
    });

    if (activeSessions.length === 0) {
      console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö session ‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà');
      console.log('\nüí° Hint: ‡πÉ‡∏´‡πâ login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á session');
      return;
    }

    console.log(`‚úÖ ‡∏û‡∏ö ${activeSessions.length} session ‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà:\n`);

    activeSessions.forEach((session, i) => {
      const user = session.user;
      console.log(`${i + 1}. Session ID: ${session.id.substring(0, 20)}...`);
      console.log(`   User: ${user.fullName} (${user.role})`);
      console.log(`   Email: ${user.email}`);
      if (user.department) {
        console.log(`   ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô: ${user.department.name}`);
        console.log(`   ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô: ${user.department.division.name}`);
        console.log(`   ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à: ${user.department.division.missionGroup.name}`);
      }
      console.log(`   Token: ${session.sessionToken.substring(0, 30)}...`);
      console.log(`   ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${session.createdAt.toLocaleString('th-TH')}`);
      console.log(`   ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏: ${session.expiresAt.toLocaleString('th-TH')}`);

      // Calculate what this user should see
      let expectedCount = 0;
      if (user.role === 'ADMIN') {
        expectedCount = '7 ‡∏Ñ‡∏ô (‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô ADMIN ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)';
      } else if (user.role === 'LEADER') {
        expectedCount = '3-4 ‡∏Ñ‡∏ô (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Division ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)';
      } else if (user.role === 'CHIEF') {
        expectedCount = '‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Mission Group';
      } else if (user.role === 'HEAD') {
        expectedCount = '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Department ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô';
      } else {
        expectedCount = '0 ‡∏Ñ‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£)';
      }

      console.log(`   üìä ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${expectedCount}`);
      console.log('');
    });

    console.log('\n===== ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° =====\n');

    // Get most recent session
    const latestSession = activeSessions[0];
    const user = latestSession.user;

    console.log(`üîç Session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${user.fullName} (${user.role})`);

    // Simulate getUserManageableUserIds for this user
    if (!['ADMIN', 'CHIEF', 'LEADER', 'HEAD'].includes(user.role)) {
      console.log('‚ö†Ô∏è  Role ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÑ‡∏î‡πâ');
      console.log('   (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ADMIN, CHIEF, LEADER, HEAD ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)');
    } else {
      console.log('‚úÖ Role ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡πÑ‡∏î‡πâ');

      if (user.role === 'ADMIN') {
        const nonAdminUsers = await prisma.user.count({
          where: {
            role: { not: 'ADMIN' },
            deletedAt: null,
          }
        });
        console.log(`   ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${nonAdminUsers} ‡∏Ñ‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á = ${nonAdminUsers - 1} ‡∏Ñ‡∏ô)`);
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkCurrentSession();
