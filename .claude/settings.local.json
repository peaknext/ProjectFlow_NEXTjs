{
  "permissions": {
    "allow": [
      "Bash(if [ -d \"old_project\" ])",
      "Bash(then echo \"old_project exists\")",
      "Bash(fi)",
      "Bash(if [ -d \"migration_plan\" ])",
      "Bash(then echo \"migration_plan exists\")",
      "Bash(if [ -d \".claude/context\" ])",
      "Bash(then echo \".claude/context exists\")",
      "Bash(else echo \".claude/context does not exist\")",
      "Bash(if [ -d \"migration_plan/scripts\" ])",
      "Bash(then echo \"exists\")",
      "Bash(else mkdir -p \"migration_plan/scripts\")",
      "Bash(node -e \"const data = require(''./migration_data.json''); const user = data.users[0]; console.log(''All fields in first user:''); Object.keys(user).forEach(key => { const val = user[key]; const display = typeof val === ''string'' && val.length > 50 ? val.substring(0,50)+''...'' : val; console.log(''  '' + key + '':'', display); });\")",
      "Bash(node migration_plan/scripts/verify-migration.js)",
      "Bash(if [ -d \"src\" ])",
      "Bash(then echo \"src exists\")",
      "Bash(else mkdir -p src)",
      "Bash(mkdir -p src/app/api/auth/login)",
      "Bash(mkdir -p src/app/api/auth/logout)",
      "Bash(mkdir -p src/app/api/auth/register)",
      "Bash(mkdir -p src/app/api/auth/verify-email)",
      "Bash(mkdir -p src/app/api/auth/reset-password)",
      "Bash(mkdir -p src/app/api/users)",
      "Bash(mkdir -p src/app/api/users/me)",
      "Bash(mkdir -p src/app/api/projects)",
      "Bash(mkdir -p src/app/api/tasks)",
      "Bash(mkdir -p src/lib)",
      "Bash(npm install)",
      "Bash(npx shadcn@latest init -y)",
      "Bash(npm install -D tailwindcss postcss autoprefixer)",
      "Bash(npx tailwindcss init -p)",
      "Bash(npx shadcn@latest init --defaults)",
      "Bash(npx shadcn@latest add button dialog input select textarea popover dropdown-menu table card badge avatar calendar sheet tabs scroll-area command form)",
      "Bash(npm install -D @tailwindcss/postcss)",
      "Bash(npm run dev)",
      "Bash(taskkill /F /PID 134976)",
      "Bash(npm uninstall tailwindcss @tailwindcss/postcss)",
      "Bash(npm install -D tailwindcss@^3 postcss autoprefixer)",
      "Bash(if [ -d \".next\" ])",
      "Bash(then rm -rf .next)",
      "Bash(else echo \".next not found\")",
      "Bash(dir /s \"f:\\OneDrive\\ProjectFlow_NEXTjs\\old_project\")",
      "Bash(findstr /E \".html$ .js$ .css$ .json$ .gs$\")",
      "Bash(powershell -ExecutionPolicy Bypass -File test-runner.ps1)",
      "Bash(node test-runner.js)",
      "Bash(npm run seed)",
      "Bash(npx prisma db execute --file ./prisma/seed.sql --schema ./prisma/schema.prisma)",
      "Bash(node tests/api/test-runner.js)",
      "Bash(node -e \"const crypto = require(''crypto''); const password = ''SecurePass123!''; const salt = ''randomsalt123''; const hash = crypto.createHash(''sha256'').update(password + salt).digest(''hex''); console.log(''Password hash:'', hash);\")",
      "Bash(node -e \"const crypto = require(''crypto''); const users = [[''SecurePass123!'', ''salt001''], [''SecurePass123!'', ''salt002''], [''SecurePass123!'', ''salt003'']]; users.forEach((u, i) => { const hash = crypto.createHash(''sha256'').update(u[0] + u[1]).digest(''hex''); console.log(''User '' + (i+1) + '' hash:'', hash); });\")",
      "Bash(npx prisma db push --force-reset --skip-generate)",
      "Bash(set PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=yes, reset the database)",
      "Bash($env:PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes, reset the database\")",
      "Bash(export PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes, reset the database\")",
      "Bash(git -C \"f:\\OneDrive\\ProjectFlow_NEXTjs\" diff --stat src/app/api/projects/)",
      "Bash(npm run build)",
      "Bash(npx tsc --noEmit --skipLibCheck src/app/api/tasks/[taskId]/route.ts)",
      "Bash(timeout 10 bash -c 'until curl -s http://localhost:3010 > /dev/null 2>&1; do sleep 1; done')",
      "Bash(tee test-output.log)",
      "Bash(curl -v -m 5 http://localhost:3010)",
      "Bash(tee test-final-results.log)",
      "Bash(if [ -d \"src/stores\" ])",
      "Bash(else mkdir -p src/stores)",
      "Bash(if [ -d \"src/providers\" ])",
      "Bash(else mkdir -p src/providers)",
      "Bash(npm install -D @tanstack/react-query-devtools)",
      "Bash(if [ -d \"src/hooks\" ])",
      "Bash(else mkdir -p src/hooks)",
      "Bash(npx shadcn@latest add alert)",
      "Bash(curl -s http://localhost:3010/api/projects/proj001/board)",
      "Bash(netstat -ano)",
      "Bash(findstr :3010)",
      "Bash(taskkill /F /PID 33804)",
      "Bash(taskkill //F //PID 33804)",
      "Bash(python -m json.tool)",
      "Bash(curl -s http://localhost:3010/api/tasks/task001)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task002 -H \"Content-Type: application/json\" -d '{\"\"\"\"statusId\"\"\"\":\"\"\"\"status002\"\"\"\"}')",
      "Bash(npm install @fullcalendar/react @fullcalendar/core @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/interaction)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task004 -H \"Content-Type: application/json\" -d '{\"\"\"\"dueDate\"\"\"\":\"\"\"\"2025-10-28T00:00:00.000Z\"\"\"\",\"\"\"\"startDate\"\"\"\":\"\"\"\"2025-10-22T00:00:00.000Z\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task005 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-10-30T00:00:00.000Z\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task006 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-11-05T00:00:00.000Z\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task007 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-10-23T00:00:00.000Z\"\"}')",
      "Bash(curl -s http://localhost:3010/projects/proj001/calendar)",
      "Bash(mkdir -p \"src/app/(dashboard)/projects/[projectId]/list\")",
      "Bash(npx shadcn@latest add checkbox dropdown-menu --yes)",
      "Bash(curl -s http://localhost:3010/api/health)",
      "Bash(curl -s http://localhost:3010/projects/proj001/list)",
      "Bash(npm install tributejs react-hook-form date-fns)",
      "Bash(npm install --save-dev @types/tributejs)",
      "Bash(cat \"F:/OneDrive/ProjectFlow_NEXTjs/src/stores/use-ui-store.ts\")",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3010/projects/proj001/board)",
      "Bash(npx shadcn@latest add skeleton --yes)",
      "Bash(npx shadcn@latest add radio-group --yes)",
      "Bash(curl -s http://localhost:3010/api/auth/session)",
      "Bash(test -f \"F:/OneDrive/ProjectFlow_NEXTjs/src/components/ui/command.tsx\")",
      "Bash(curl -s http://localhost:3010/api/users/me/pinned-tasks)",
      "Bash(curl -s -X POST http://localhost:3010/api/users/me/pinned-tasks -H \"Content-Type: application/json\" -d '{\"\"\"\"taskId\"\"\"\":\"\"\"\"task001\"\"\"\"}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Test checklist item\"\"\"\"}')",
      "Bash(npm run prisma:generate)",
      "Bash(node -e \"const { prisma } = require(''./src/lib/db.js''); console.log(typeof prisma.checklist);\")",
      "Bash(test -f \"src/generated/prisma/index.d.ts\")",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"name\"\":\"\"Test item\"\"}')",
      "Bash(curl -s -X DELETE \"http://localhost:3010/api/tasks/task009/checklists/cmh0ok25300039i9g594snr5x\")",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Test item for update\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task009/checklists/cmh0osdje00099i9gwtp7n3za -H \"Content-Type: application/json\" -d '{\"\"\"\"isChecked\"\"\"\":true}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task005/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task005/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment from API\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task006/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task006/comments)",
      "Bash(curl -s http://localhost:3010/api/tasks/task001/history)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task001 -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Setup Development Environment Updated\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task002 -H \"Content-Type: application/json\" -d '{\"\"\"\"priority\"\"\"\":1}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task002/history)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task003 -H \"Content-Type: application/json\" -d '{\"\"\"\"priority\"\"\"\":1}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task003/history)",
      "Bash(if [ -f \"CLAUDE.md\" ])",
      "Bash(then echo \"CLAUDE.md exists\")",
      "Bash(else echo \"CLAUDE.md does not exist\")",
      "Bash(if [ -d \".env\" ])",
      "Bash(then echo \".env is a directory\")",
      "Bash(elif [ -f \".env\" ])",
      "Bash(then echo \".env exists\")",
      "Bash(else echo \".env does not exist\")",
      "Bash(powershell -Command \"Get-Content ''F:/OneDrive/ProjectFlow_NEXTjs/src/app/(auth)/register/page.tsx'' | Select-Object -First 50\")",
      "Bash(PORT=3011 npm run dev)",
      "Bash(taskkill //F //PID 120188)"
    ],
    "deny": [],
    "ask": []
  }
}
