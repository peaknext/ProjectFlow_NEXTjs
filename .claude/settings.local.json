{
  "permissions": {
    "allow": [
      "Bash(if [ -d \"old_project\" ])",
      "Bash(then echo \"old_project exists\")",
      "Bash(fi)",
      "Bash(if [ -d \"migration_plan\" ])",
      "Bash(then echo \"migration_plan exists\")",
      "Bash(if [ -d \".claude/context\" ])",
      "Bash(then echo \".claude/context exists\")",
      "Bash(else echo \".claude/context does not exist\")",
      "Bash(if [ -d \"migration_plan/scripts\" ])",
      "Bash(then echo \"exists\")",
      "Bash(else mkdir -p \"migration_plan/scripts\")",
      "Bash(node -e \"const data = require(''./migration_data.json''); const user = data.users[0]; console.log(''All fields in first user:''); Object.keys(user).forEach(key => { const val = user[key]; const display = typeof val === ''string'' && val.length > 50 ? val.substring(0,50)+''...'' : val; console.log(''  '' + key + '':'', display); });\")",
      "Bash(node migration_plan/scripts/verify-migration.js)",
      "Bash(if [ -d \"src\" ])",
      "Bash(then echo \"src exists\")",
      "Bash(else mkdir -p src)",
      "Bash(mkdir -p src/app/api/auth/login)",
      "Bash(mkdir -p src/app/api/auth/logout)",
      "Bash(mkdir -p src/app/api/auth/register)",
      "Bash(mkdir -p src/app/api/auth/verify-email)",
      "Bash(mkdir -p src/app/api/auth/reset-password)",
      "Bash(mkdir -p src/app/api/users)",
      "Bash(mkdir -p src/app/api/users/me)",
      "Bash(mkdir -p src/app/api/projects)",
      "Bash(mkdir -p src/app/api/tasks)",
      "Bash(mkdir -p src/lib)",
      "Bash(npm install)",
      "Bash(npx shadcn@latest init -y)",
      "Bash(npm install -D tailwindcss postcss autoprefixer)",
      "Bash(npx tailwindcss init -p)",
      "Bash(npx shadcn@latest init --defaults)",
      "Bash(npx shadcn@latest add button dialog input select textarea popover dropdown-menu table card badge avatar calendar sheet tabs scroll-area command form)",
      "Bash(npm install -D @tailwindcss/postcss)",
      "Bash(npm run dev)",
      "Bash(taskkill /F /PID 134976)",
      "Bash(npm uninstall tailwindcss @tailwindcss/postcss)",
      "Bash(npm install -D tailwindcss@^3 postcss autoprefixer)",
      "Bash(if [ -d \".next\" ])",
      "Bash(then rm -rf .next)",
      "Bash(else echo \".next not found\")",
      "Bash(dir /s \"f:\\OneDrive\\ProjectFlow_NEXTjs\\old_project\")",
      "Bash(findstr /E \".html$ .js$ .css$ .json$ .gs$\")",
      "Bash(powershell -ExecutionPolicy Bypass -File test-runner.ps1)",
      "Bash(node test-runner.js)",
      "Bash(npm run seed)",
      "Bash(npx prisma db execute --file ./prisma/seed.sql --schema ./prisma/schema.prisma)",
      "Bash(node tests/api/test-runner.js)",
      "Bash(node -e \"const crypto = require(''crypto''); const password = ''SecurePass123!''; const salt = ''randomsalt123''; const hash = crypto.createHash(''sha256'').update(password + salt).digest(''hex''); console.log(''Password hash:'', hash);\")",
      "Bash(node -e \"const crypto = require(''crypto''); const users = [[''SecurePass123!'', ''salt001''], [''SecurePass123!'', ''salt002''], [''SecurePass123!'', ''salt003'']]; users.forEach((u, i) => { const hash = crypto.createHash(''sha256'').update(u[0] + u[1]).digest(''hex''); console.log(''User '' + (i+1) + '' hash:'', hash); });\")",
      "Bash(npx prisma db push --force-reset --skip-generate)",
      "Bash(set PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=yes, reset the database)",
      "Bash($env:PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes, reset the database\")",
      "Bash(export PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes, reset the database\")",
      "Bash(git -C \"f:\\OneDrive\\ProjectFlow_NEXTjs\" diff --stat src/app/api/projects/)",
      "Bash(npm run build)",
      "Bash(npx tsc --noEmit --skipLibCheck src/app/api/tasks/[taskId]/route.ts)",
      "Bash(timeout 10 bash -c 'until curl -s http://localhost:3010 > /dev/null 2>&1; do sleep 1; done')",
      "Bash(tee test-output.log)",
      "Bash(curl -v -m 5 http://localhost:3010)",
      "Bash(tee test-final-results.log)",
      "Bash(if [ -d \"src/stores\" ])",
      "Bash(else mkdir -p src/stores)",
      "Bash(if [ -d \"src/providers\" ])",
      "Bash(else mkdir -p src/providers)",
      "Bash(npm install -D @tanstack/react-query-devtools)",
      "Bash(if [ -d \"src/hooks\" ])",
      "Bash(else mkdir -p src/hooks)",
      "Bash(npx shadcn@latest add alert)",
      "Bash(curl -s http://localhost:3010/api/projects/proj001/board)",
      "Bash(netstat -ano)",
      "Bash(findstr :3010)",
      "Bash(taskkill /F /PID 33804)",
      "Bash(taskkill //F //PID 33804)",
      "Bash(python -m json.tool)",
      "Bash(curl -s http://localhost:3010/api/tasks/task001)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task002 -H \"Content-Type: application/json\" -d '{\"\"\"\"statusId\"\"\"\":\"\"\"\"status002\"\"\"\"}')",
      "Bash(npm install @fullcalendar/react @fullcalendar/core @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/interaction)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task004 -H \"Content-Type: application/json\" -d '{\"\"\"\"dueDate\"\"\"\":\"\"\"\"2025-10-28T00:00:00.000Z\"\"\"\",\"\"\"\"startDate\"\"\"\":\"\"\"\"2025-10-22T00:00:00.000Z\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task005 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-10-30T00:00:00.000Z\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task006 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-11-05T00:00:00.000Z\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task007 -H \"Content-Type: application/json\" -d '{\"\"dueDate\"\":\"\"2025-10-23T00:00:00.000Z\"\"}')",
      "Bash(curl -s http://localhost:3010/projects/proj001/calendar)",
      "Bash(mkdir -p \"src/app/(dashboard)/projects/[projectId]/list\")",
      "Bash(npx shadcn@latest add checkbox dropdown-menu --yes)",
      "Bash(curl -s http://localhost:3010/api/health)",
      "Bash(curl -s http://localhost:3010/projects/proj001/list)",
      "Bash(npm install tributejs react-hook-form date-fns)",
      "Bash(npm install --save-dev @types/tributejs)",
      "Bash(cat \"F:/OneDrive/ProjectFlow_NEXTjs/src/stores/use-ui-store.ts\")",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3010/projects/proj001/board)",
      "Bash(npx shadcn@latest add skeleton --yes)",
      "Bash(npx shadcn@latest add radio-group --yes)",
      "Bash(curl -s http://localhost:3010/api/auth/session)",
      "Bash(test -f \"F:/OneDrive/ProjectFlow_NEXTjs/src/components/ui/command.tsx\")",
      "Bash(curl -s http://localhost:3010/api/users/me/pinned-tasks)",
      "Bash(curl -s -X POST http://localhost:3010/api/users/me/pinned-tasks -H \"Content-Type: application/json\" -d '{\"\"\"\"taskId\"\"\"\":\"\"\"\"task001\"\"\"\"}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Test checklist item\"\"\"\"}')",
      "Bash(npm run prisma:generate)",
      "Bash(node -e \"const { prisma } = require(''./src/lib/db.js''); console.log(typeof prisma.checklist);\")",
      "Bash(test -f \"src/generated/prisma/index.d.ts\")",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"name\"\":\"\"Test item\"\"}')",
      "Bash(curl -s -X DELETE \"http://localhost:3010/api/tasks/task009/checklists/cmh0ok25300039i9g594snr5x\")",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task009/checklists -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Test item for update\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task009/checklists/cmh0osdje00099i9gwtp7n3za -H \"Content-Type: application/json\" -d '{\"\"\"\"isChecked\"\"\"\":true}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task005/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task005/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment from API\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s -X POST http://localhost:3010/api/tasks/task006/comments -H \"Content-Type: application/json\" -d '{\"\"\"\"content\"\"\"\":\"\"\"\"Test comment\"\"\"\",\"\"\"\"mentionedUserIds\"\"\"\":[]}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task006/comments)",
      "Bash(curl -s http://localhost:3010/api/tasks/task001/history)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task001 -H \"Content-Type: application/json\" -d '{\"\"\"\"name\"\"\"\":\"\"\"\"Setup Development Environment Updated\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task002 -H \"Content-Type: application/json\" -d '{\"\"\"\"priority\"\"\"\":1}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task002/history)",
      "Bash(curl -s -X PATCH http://localhost:3010/api/tasks/task003 -H \"Content-Type: application/json\" -d '{\"\"\"\"priority\"\"\"\":1}')",
      "Bash(curl -s http://localhost:3010/api/tasks/task003/history)",
      "Bash(if [ -f \"CLAUDE.md\" ])",
      "Bash(then echo \"CLAUDE.md exists\")",
      "Bash(else echo \"CLAUDE.md does not exist\")",
      "Bash(if [ -d \".env\" ])",
      "Bash(then echo \".env is a directory\")",
      "Bash(elif [ -f \".env\" ])",
      "Bash(then echo \".env exists\")",
      "Bash(else echo \".env does not exist\")",
      "Bash(powershell -Command \"Get-Content ''F:/OneDrive/ProjectFlow_NEXTjs/src/app/(auth)/register/page.tsx'' | Select-Object -First 50\")",
      "Bash(PORT=3011 npm run dev)",
      "Bash(taskkill //F //PID 120188)",
      "Bash(timeout 10 bash -c 'until curl -s http://localhost:3000 > /dev/null 2>&1; do sleep 1; done')",
      "Bash(curl -s -X POST http://localhost:3010/api/auth/request-reset -H \"Content-Type: application/json\" -d \"{\"\"email\"\":\"\"admin@hospital.test\"\"}\")",
      "Bash(taskkill /F /PID 104236)",
      "Bash(taskkill //F //PID 104236)",
      "Bash(curl -s -X POST http://localhost:3010/api/auth/request-reset -H \"Content-Type: application/json\" -d \"{\"\"email\"\":\"\"test@example.com\"\"}\")",
      "Bash(curl -s -X POST http://localhost:3010/api/auth/reset-password -H \"Content-Type: application/json\" -d \"{\"\"token\"\":\"\"2b747ac58ea1294dc71af94dd1591357fc170d76efbb91aa622aaa8cb48eb060\"\",\"\"newPassword\"\":\"\"NewSecure123!\"\"}\")",
      "Bash(curl -s -X POST http://localhost:3010/api/auth/reset-password -H \"Content-Type: application/json\" -d '{\"\"\"\"token\"\"\"\":\"\"\"\"2b747ac58ea1294dc71af94dd1591357fc170d76efbb91aa622aaa8cb48eb060\"\"\"\",\"\"\"\"newPassword\"\"\"\":\"\"\"\"NewSecure123!\"\"\"\"}')",
      "Bash(powershell -Command \"$body = @{token=''2b747ac58ea1294dc71af94dd1591357fc170d76efbb91aa622aaa8cb48eb060''; newPassword=''NewSecure123!''} | ConvertTo-Json; Invoke-RestMethod -Uri ''http://localhost:3010/api/auth/reset-password'' -Method Post -ContentType ''application/json'' -Body $body\")",
      "Bash(if [ -d \"src/app/(dashboard)/reports\" ])",
      "Bash(then echo \"reports exists\")",
      "Bash(else echo \"reports NOT exists\")",
      "Bash(if [ -d \"src/app/(dashboard)/personnel\" ])",
      "Bash(then echo \"personnel exists\")",
      "Bash(else echo \"personnel NOT exists\")",
      "Bash(test -f \"f:/OneDrive/ProjectFlow_NEXTjs/EMAIL_SETUP_GUIDE.md\")",
      "Bash(test -f \"f:/OneDrive/ProjectFlow_NEXTjs/PASSWORD_RESET_IMPLEMENTATION.md\")",
      "Bash(curl -s http://localhost:3010/api/organization/mission-groups)",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3010)",
      "Bash(curl -s http://localhost:3010/api/workspace)",
      "Bash(curl -s http://localhost:3010/api/users/me)",
      "Bash(curl -s 'http://localhost:3010/api/organization/divisions')",
      "Bash(curl -s 'http://localhost:3010/api/organization/divisions/DIV-037')",
      "Bash(curl -s 'http://localhost:3010/api/organization/departments')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/users/user001 -H \"Content-Type: application/json\" -d '{\"\"\"\"departmentId\"\"\"\":\"\"\"\"DEPT-058\"\"\"\"}')",
      "Bash(curl -s -X PATCH http://localhost:3010/api/users/user001 -H \"Content-Type: application/json\" -d \"{\"\"departmentId\"\":\"\"DEPT-058\"\"}\")",
      "Bash(npx tsc --noEmit --skipLibCheck)",
      "Bash(if [ -f \".next/server/app-paths-manifest.json\" ])",
      "Bash(then echo \"Build exists\")",
      "Bash(else echo \"No build\")",
      "Bash(cat dev.log)",
      "Bash(taskkill //F //PID 96184)",
      "Bash(PORT=3010 npm run dev)",
      "Bash(curl -s \"http://localhost:3010/api/departments/DEPT-058/tasks\" -H \"Authorization: Bearer mock-session-token\")",
      "Bash(curl -s \"http://localhost:3010/api/departments/DEPT-058/tasks\")",
      "Bash(npx tsc --noEmit --skipLibCheck src/hooks/use-auth.ts src/app/(dashboard)/department/tasks/page.tsx)",
      "Bash(test -f \"src/components/ui/popover.tsx\")",
      "Bash(test -f \"src/components/ui/command.tsx\")",
      "Bash(find \"src/app/(dashboard)/projects\" -name \"page.tsx\" -type f)",
      "Bash(taskkill //F //PID 108772)",
      "Bash(node -e \"const data = require(''./migration_data.json''); const admins = data.users.filter(u => u.role === ''ADMIN''); console.log(''ADMIN users:''); console.log(JSON.stringify(admins, null, 2));\")",
      "Bash(node -e \"const data = JSON.parse(require(''''fs'''').readFileSync(0, ''''utf-8'''')); const user = data.data.user; console.log(''''User ID:'''', user.id); console.log(''''Role:'''', user.role); console.log(''''Department:'''', user.departmentId); console.log(''''Additional Roles:'''', JSON.stringify(user.additionalRoles, null, 2));\")",
      "Bash(test -f \"src/components/ui/slider.tsx\")",
      "Bash(npx shadcn@latest add slider --yes)",
      "Bash(taskkill /F /PID 59308)",
      "Bash(set PORT=3010)",
      "Bash(curl -s \"http://localhost:3000\")",
      "Bash(curl -s http://localhost:3010/api/projects/proj001)",
      "Bash(npx tsc --noEmit --skipLibCheck src/components/views/list-view/index.tsx)",
      "Bash(taskkill /F /PID 60988)",
      "Bash(taskkill /F /PID 67204)",
      "Bash(taskkill //F //PID 60988)",
      "Bash(taskkill //F //PID 67204)",
      "Bash(curl -s \"http://localhost:3010/projects/proj001/list\" -o /dev/null -w \"%{http_code}\\n\")",
      "Bash(curl -s -X PATCH \"http://localhost:3010/api/tasks/task001\" -H \"Content-Type: application/json\" -d '{\"\"\"\"priority\"\"\"\":2}')",
      "Bash(curl -s -X POST \"http://localhost:3010/api/users/me/pinned-tasks\" -H \"Content-Type: application/json\" -d '{\"\"\"\"taskId\"\"\"\":\"\"\"\"task001\"\"\"\"}')",
      "Bash(curl -s -X DELETE \"http://localhost:3010/api/users/me/pinned-tasks?taskId=task001\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); tasks = data[''''data''''][''''tasks''''][:3]; print(''''First 3 tasks dueDate:''''); [print(f\"\"  {t[''''id'''']}: {t.get(''''dueDate'''')}\"\") for t in tasks]\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); tasks = [t for t in data[''''data''''][''''tasks''''] if t.get(''''dueDate'''')]; print(f''''Tasks with dueDate: {len(tasks)}''''); [print(f\"\"  {t[''''id'''']}: {t[''''dueDate'''']}\"\") for t in tasks[:5]]\")",
      "Bash(curl -s -X PATCH \"http://localhost:3010/api/tasks/task001\" -H \"Content-Type: application/json\" -d '{\"\"\"\"dueDate\"\"\"\":\"\"\"\"2025-10-25\"\"\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); print(''''DueDate:'''', data.get(''''data'''', {}).get(''''task'''', {}).get(''''dueDate''''))\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); users = data[''''data''''].get(''''users'''', []); print(f''''Users count: {len(users)}''''); [print(f\"\"  {u[''''fullName'''']}\"\") for u in users[:5]]\")",
      "Bash(npm run prisma:push)",
      "Bash(taskkill //F //PID 115336)",
      "Bash(curl -s http://localhost:3000/projects/proj001/list -o /dev/null -w \"%{http_code}\\n\")",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task001/close -H \"Content-Type: application/json\" -d '{\"\"\"\"closeType\"\"\"\":\"\"\"\"COMPLETED\"\"\"\"}')",
      "Bash(curl -s http://localhost:3000/api/projects/proj001/board)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); tasks = [t for t in data[''''data''''][''''tasks''''] if not t.get(''''isClosed'''')]; print(f''''Open tasks: {len(tasks)}''''); [print(f\"\"  {t[''''id'''']}: {t[''''name'''']}\"\") for t in tasks[:3]]\")",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task009/close -H \"Content-Type: application/json\" -d '{\"\"\"\"closeType\"\"\"\":\"\"\"\"COMPLETED\"\"\"\"}')",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task003/close -H \"Content-Type: application/json\" -d '{\"\"\"\"closeType\"\"\"\":\"\"\"\"ABORTED\"\"\"\"}')",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task010/close -H \"Content-Type: application/json\" -d '{\"\"\"\"closeType\"\"\"\":\"\"\"\"ABORTED\"\"\"\",\"\"\"\"reason\"\"\"\":\"\"\"\"Test abort\"\"\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); task = data.get(''''data'''', {}).get(''''task'''', {}); print(''''Task:'''', task.get(''''name'''')); print(''''Closed:'''', task.get(''''isClosed'''')); print(''''CloseType:'''', task.get(''''closeType'''')); print(''''ClosedBy:'''', task.get(''''closedBy'''', {}).get(''''fullName''''))\")",
      "Bash(curl -s http://localhost:3000/api/tasks/task010/history)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); histories = data[''''data''''][''''histories'''']; print(f''''Total histories: {len(histories)}''''); latest = histories[0] if histories else None; print(f''''Latest: {latest.get(\"\"historyText\"\") if latest else \"\"None\"\"}'''')\")",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task008/close -H \"Content-Type: application/json\" -d '{\"\"\"\"type\"\"\"\":\"\"\"\"COMPLETED\"\"\"\"}')",
      "Bash(curl -s -X POST http://localhost:3000/api/tasks/task005/close -H \"Content-Type: application/json\" -d '{\"\"\"\"type\"\"\"\":\"\"\"\"ABORTED\"\"\"\",\"\"\"\"reason\"\"\"\":\"\"\"\"Test cancellation\"\"\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); task = data.get(''''data'''', {}).get(''''task'''', {}); print(''''Task:'''', task.get(''''name'''')); print(''''Closed:'''', task.get(''''isClosed'''')); print(''''CloseType:'''', task.get(''''closeType''''))\")",
      "Bash(curl -s http://localhost:3000/api/tasks/task008/history)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); histories = data[''''data''''][''''history'''']; print(f''''Total histories: {len(histories)}''''); latest = histories[0] if histories else None; print(f''''Latest: {latest.get(\"\"description\"\") if latest else \"\"None\"\"}'''')\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); tasks = data[''''data''''][''''tasks'''']; closed = [t for t in tasks if t.get(''''isClosed'''')]; open_tasks = [t for t in tasks if not t.get(''''isClosed'''')]; print(f''''Total tasks: {len(tasks)}''''); print(f''''Closed tasks: {len(closed)}''''); print(f''''Open tasks: {len(open_tasks)}''''); print(''''\\nClosed tasks:''''); [print(f\"\"  {t[''''id'''']}: {t[''''name'''']} (closeType: {t.get(''''closeType'''')})\"\") for t in closed[:5]]\")",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\\n\" \"http://localhost:3000/projects/proj001/list\")",
      "Bash(git add src/components/views/calendar-view/index.tsx src/app/globals.css src/components/ui/assignee-popover.tsx src/components/task-panel/details-tab/field-grid.tsx src/components/modals/create-task-modal.tsx src/components/views/common/ src/hooks/use-persisted-filters.ts src/components/views/board-view/index.tsx src/components/views/list-view/index.tsx CLAUDE.md)",
      "Bash(findstr :3000)",
      "Bash(findstr :3001)",
      "Bash(findstr :3002)",
      "Bash(taskkill /F /PID 42692)",
      "Bash(taskkill /F /PID 116600)",
      "Bash(taskkill //F //PID 42692)",
      "Bash(taskkill //F //PID 116600)",
      "Bash(curl -s \"http://localhost:3001/api/departments/DEPT-059/tasks?view=grouped&sortBy=dueDate&sortDir=asc&includeCompleted=false\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(f''''Success: {data.get(\"\"success\"\")}''''); dept = data.get(''''data'''', {}).get(''''department'''', {}); print(f''''Department: {dept.get(\"\"name\"\")}''''); projects = data.get(''''data'''', {}).get(''''projects'''', []); print(f''''Projects: {len(projects)}''''); users = data.get(''''data'''', {}).get(''''users'''', []); print(f''''Users: {len(users)}''''); stats = data.get(''''data'''', {}).get(''''stats'''', {}); print(f''''Total Tasks: {stats.get(\"\"totalTasks\"\")}'''')\")",
      "Bash(test -f \"src/components/ui/progress.tsx\")",
      "Bash(curl -s \"http://localhost:3002/api/departments/DEPT-059/tasks?view=grouped&sortBy=dueDate&sortDir=asc&includeCompleted=false\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); projects = data.get(''''data'''', {}).get(''''projects'''', []); all_tasks = []; [all_tasks.extend(p.get(''''tasks'''', [])) for p in projects]; pinned = [t for t in all_tasks if t.get(''''isPinned'''')]; print(f''''Total tasks: {len(all_tasks)}''''); print(f''''Pinned tasks: {len(pinned)}''''); [print(f''''  - {t.get(\"\"name\"\")} (isPinned: {t.get(\"\"isPinned\"\")}, isClosed: {t.get(\"\"isClosed\"\")})'''') for t in pinned[:5]]\")",
      "Bash(curl -s -X POST \"http://localhost:3002/api/users/me/pinned-tasks\" -H \"Content-Type: application/json\" -d '{\"\"\"\"taskId\"\"\"\":\"\"\"\"task001\"\"\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(f''''Success: {data.get(\"\"success\"\")}''''); print(f''''Message: {data.get(\"\"message\"\", data.get(\"\"error\"\"))}'''')\")",
      "Bash(curl -s -o /dev/null -w \"%{http_code}\\n\" \"http://localhost:3002/department/tasks\")",
      "Bash(git add src/components/views/department-tasks/department-tasks-view.tsx)",
      "Bash(git add src/hooks/use-department-tasks.ts src/components/common/task-row.tsx src/components/ui/assignee-popover.tsx)",
      "Bash(git add \"src/app/(dashboard)/department/tasks/page.tsx\" CLAUDE.md)",
      "Bash(git add src/app/layout.tsx src/components/layout/navbar.tsx \"src/app/(auth)/login/page.tsx\" \"src/app/(auth)/register/page.tsx\" src/lib/email.ts)",
      "Bash(git commit -m \"$(cat <<''EOF''\nchore: Rebrand app name from ProjectFlow to ProjectFlows\n\nUpdated application name across all UI elements:\n- Page title and metadata (layout.tsx)\n- Navbar logo and text (navbar.tsx)\n- Login page title (login/page.tsx)\n- Register page description (register/page.tsx)\n- Email subjects and content (email.ts)\n\nFiles modified:\n- src/app/layout.tsx - Changed page title metadata\n- src/components/layout/navbar.tsx - Updated logo alt and display text\n- src/app/(auth)/login/page.tsx - Updated h1 title\n- src/app/(auth)/register/page.tsx - Updated description text\n- src/lib/email.ts - Updated email subjects and body text\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(node -e \"const data = JSON.parse(require(''''fs'''').readFileSync(0, ''''utf-8'''')); const tasks = data.data.tasks; console.log(''''Total tasks:'''', tasks.length); if (tasks.length > 0) { const firstTask = tasks[0]; console.log(''''First task ID:'''', firstTask.id); console.log(''''First task name:'''', firstTask.name); console.log(''''First task projectId:'''', firstTask.projectId); console.log(''''Has projectId:'''', !!firstTask.projectId); }\")",
      "Bash(node -e \"const data = JSON.parse(require(''''fs'''').readFileSync(0, ''''utf-8'''')); const tasks = data.data.tasks; console.log(''''Total tasks:'''', tasks.length); if (tasks.length > 0) { const t = tasks[0]; console.log(''''First task ID:'''', t.id); console.log(''''First task name:'''', t.name); console.log(''''First task projectId:'''', t.projectId); }\")",
      "Bash(taskkill //F //PID 105740)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Server status:'''', data.get(''''status''''))\")",
      "Bash(mkdir -p \"src/app/(dashboard)/projects\")",
      "Bash(curl -s http://localhost:3000/api/projects?includeDetails=true)",
      "Bash(curl -s -X POST http://localhost:3000/api/auth/login -H \"Content-Type: application/json\" -d '{\"\"\"\"email\"\"\"\":\"\"\"\"admin@hospital.test\"\"\"\",\"\"\"\"password\"\"\"\":\"\"\"\"SecurePass123!\"\"\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); print(''''Token:'''', data.get(''''data'''', {}).get(''''sessionToken'''', ''''N/A'''')[:50] if data.get(''''data'''') else ''''N/A'''')\")",
      "Bash(curl -s -X POST http://localhost:3000/api/auth/login -H \"Content-Type: application/json\" -d '{\"\"email\"\":\"\"admin@hospital.test\"\",\"\"password\"\":\"\"SecurePass123!\"\"}')",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); print(''''Projects count:'''', len(data.get(''''data'''', {}).get(''''projects'''', [])))\")",
      "Bash(curl -s http://localhost:3003/api/projects?includeDetails=true)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''Success:'''', data.get(''''success'''')); print(''''Projects:'''', len(data.get(''''data'''', {}).get(''''projects'''', [])))\")",
      "Bash(taskkill //F //PID 104452)",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''✅ API Working! Projects:'''', len(data.get(''''data'''', {}).get(''''projects'''', [])))\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(''''API Working! Projects:'''', len(data.get(''''data'''', {}).get(''''projects'''', [])))\")",
      "Bash(taskkill //F //PID 101872)",
      "Bash(curl -s http://localhost:3000/api/organization/action-plans)",
      "Bash(curl -s \"http://localhost:3000/api/organization/action-plans?missionId=MISSION-2024-001\")",
      "Bash(python -c \"import sys, json; data = json.load(sys.stdin); print(f''''Mission MISSION-2024-001 has {len(data[\"\"data\"\"][\"\"plans\"\"])} action plans:''''); [print(f''''  - {p[\"\"name\"\"]}'''') for p in data[''''data''''][''''plans''''][:5]]\")",
      "Bash(test:*)",
      "Bash(npx tsc:*)",
      "Bash(curl:*)",
      "Bash(python:*)",
      "Bash(TOKEN=\"e759339bfdd013fe1b574cffa4acef15bf9afdc08cd368a7afdd29eec682182c\")",
      "Bash(node -e:*)",
      "Bash(taskkill //F //PID 30456)",
      "Bash(timeout 15 npm run dev:*)",
      "Bash(if [ ! -d \"src/app/api/admin\" ])",
      "Bash(then mkdir -p src/app/api/admin/users)",
      "Bash(PORT=3000 npm run dev:*)",
      "Bash(node test-create-user.js:*)",
      "Bash(node check-jobtitle-structure.js:*)",
      "Bash(cat:*)",
      "Bash(taskkill //F //PID 41300)",
      "Bash(taskkill //F //PID 44708)",
      "Bash(timeout 5 bash:*)",
      "Bash(timeout 15 bash:*)",
      "Bash(findstr:*)",
      "Bash(taskkill //F //PID 55188)",
      "Bash(git commit:*)",
      "Bash(git add:*)",
      "Bash(else echo \"⚠️ .next folder not found\")",
      "Bash(node check-users-count.js:*)",
      "Bash(node check-current-session.js:*)",
      "Bash(powershell:*)",
      "Bash(ls:*)",
      "Bash(taskkill:*)",
      "Bash(PORT=3001 npm run dev:*)",
      "Bash(npx shadcn@latest add:*)",
      "Bash(if [ -d \"src/app/api/reports\" ])",
      "Bash(else mkdir -p src/app/api/reports/tasks)",
      "Bash(npm install:*)",
      "Bash(timeout 20 bash -c 'PORT=3010 npm run dev > dev.log 2>&1 & echo $!':*)",
      "Bash(timeout 10 bash:*)",
      "Bash(node scripts/backfill-project-progress.js:*)",
      "Bash(find:*)",
      "Bash(git -C \"f:/OneDrive/ProjectFlow_NEXTjs\" status src/hooks/use-projects.ts)",
      "Bash(grep:*)",
      "Bash(git push)",
      "Bash(npm run type-check:*)",
      "Bash(cut:*)",
      "Bash(git push:*)",
      "Bash(mv:*)",
      "Bash(rm:*)",
      "Bash(git reset:*)"
    ],
    "deny": [],
    "ask": []
  }
}
